#!/usr/bin/env python3
"""
Migration script to add user_id field to registration table
‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
"""

import sqlite3
from thaitour.models import get_session
from thaitour.models.registration_model import Registration
from thaitour.models.user_model import User, UserRole
from thaitour.core.security import get_password_hash
from sqlmodel import select
import json

def migrate_database():
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    
    # ‡πÉ‡∏ä‡πâ sqlite3 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
    try:
        conn = sqlite3.connect('thaitour.db')
        cursor = conn.cursor()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå user_id ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á registration
        cursor.execute('''
            ALTER TABLE registration 
            ADD COLUMN user_id INTEGER 
            REFERENCES user(id)
        ''')
        
        conn.commit()
        print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå user_id ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á registration ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
    except sqlite3.OperationalError as e:
        if "duplicate column name" in str(e):
            print("‚ÑπÔ∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå user_id ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
        else:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    finally:
        conn.close()

def create_user_accounts_for_existing_registrations():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á User Account ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Registration ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"""
    
    with next(get_session()) as session:
        # ‡∏´‡∏≤ Registration ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ User Account
        registrations_without_user = session.exec(
            select(Registration).where(Registration.user_id.is_(None))
        ).all()
        
        print(f"üìã ‡∏û‡∏ö Registration ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ User Account: {len(registrations_without_user)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        for reg in registrations_without_user:
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ User ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                existing_user = session.exec(
                    select(User).where(User.email == reg.email)
                ).first()
                
                if existing_user:
                    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Registration ‡∏Å‡∏±‡∏ö User ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                    reg.user_id = existing_user.id
                    print(f"üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Registration ID {reg.id} ‡∏Å‡∏±‡∏ö User ID {existing_user.id}")
                else:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á User Account ‡πÉ‡∏´‡∏°‡πà
                    username = reg.email  # ‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏õ‡πá‡∏ô username
                    full_name = f"{reg.first_name} {reg.last_name}"
                    default_password = "123456"  # ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
                    
                    new_user = User(
                        username=username,
                        hashed_password=get_password_hash(default_password),
                        email=reg.email,
                        full_name=full_name,
                        role=UserRole.USER,
                        is_active=True,
                        is_verified=True
                    )
                    
                    session.add(new_user)
                    session.commit()
                    session.refresh(new_user)
                    
                    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Registration ‡∏Å‡∏±‡∏ö User ‡πÉ‡∏´‡∏°‡πà
                    reg.user_id = new_user.id
                    print(f"üë§ ‡∏™‡∏£‡πâ‡∏≤‡∏á User Account ‡πÉ‡∏´‡∏°‡πà ID {new_user.id} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Registration ID {reg.id}")
                    print(f"   - Email: {reg.email}")
                    print(f"   - ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {default_password}")
                
                session.add(reg)
                
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö Registration ID {reg.id}: {e}")
                continue
        
        session.commit()
        print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Registration ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö migration"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Migration: ‡πÄ‡∏û‡∏¥‡πà‡∏° User Account ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Registration")
    
    # 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    migrate_database()
    
    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á User Account ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Registration ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    create_user_accounts_for_existing_registrations()
    
    print("üéâ Migration ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("\nüìã ‡∏™‡∏£‡∏∏‡∏õ:")
    print("- Registration ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á User Account ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    print("- Registration ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ User Account ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: 123456")
    print("- ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ login ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß")

if __name__ == "__main__":
    main()
