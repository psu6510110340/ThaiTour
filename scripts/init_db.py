#!/usr/bin/env python3
"""
Database initialization script for ThaiTour
‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
"""

from thaitour.models import create_db_and_tables, get_session
from thaitour.models.province_model import Province, ProvinceType
from thaitour.models.tax_model import TaxBenefit, TaxBenefitType
from thaitour.models.user_model import User, UserRole
from thaitour.core.security import get_password_hash
from sqlmodel import select
from datetime import datetime

def init_database():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print("üóÑÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    create_db_and_tables()
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def seed_provinces():
    """‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    print("üåé ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î...")
    
    provinces = [
        {
            "name_th": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£",
            "name_en": "Bangkok", 
            "code": "BKK",
            "province_type": ProvinceType.PRIMARY,
            "region": "‡∏Å‡∏•‡∏≤‡∏á",
            "description": "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏´‡∏•‡∏ß‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á",
            "famous_attractions": '["‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß", "‡∏ß‡∏±‡∏î‡πÇ‡∏û‡∏ò‡∏¥‡πå", "‡∏ß‡∏±‡∏î‡∏≠‡∏£‡∏∏‡∏ì", "‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£"]',
            "local_specialties": '["‡∏Ç‡πâ‡∏≤‡∏ß‡∏ú‡∏±‡∏î‡∏Å‡∏∏‡πâ‡∏á", "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á", "‡∏ú‡∏±‡∏Å‡∏ö‡∏∏‡πâ‡∏á‡πÑ‡∏ü‡πÅ‡∏î‡∏á"]',
            "tax_reduction_percentage": 0.0,
            "max_reduction_amount": 0.0
        },
        {
            "name_th": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà",
            "name_en": "Chiang Mai",
            "code": "CNX", 
            "province_type": ProvinceType.PRIMARY,
            "region": "‡πÄ‡∏´‡∏ô‡∏∑‡∏≠",
            "description": "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏®‡∏¥‡∏•‡∏õ‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
            "famous_attractions": '["‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û", "‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô", "‡πÑ‡∏ô‡∏ó‡πå‡∏ö‡∏≤‡∏ã‡∏≤‡∏£‡πå"]',
            "local_specialties": '["‡∏Ç‡∏ô‡∏°‡∏à‡∏µ‡∏ô‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏µ‡πâ‡∏¢‡∏ß", "‡πÑ‡∏™‡πâ‡∏≠‡∏±‡πà‡∏ß", "‡πÅ‡∏Å‡∏á‡∏Æ‡∏±‡∏á‡πÄ‡∏•"]',
            "tax_reduction_percentage": 0.0,
            "max_reduction_amount": 0.0
        },
        {
            "name_th": "‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
            "name_en": "Kanchanaburi",
            "code": "KAN",
            "province_type": ProvinceType.SECONDARY,
            "region": "‡∏Å‡∏•‡∏≤‡∏á",
            "description": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°",
            "famous_attractions": '["‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÅ‡∏Ñ‡∏ß", "‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡πÄ‡∏≠‡∏£‡∏≤‡∏ß‡∏±‡∏ì", "‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡πÑ‡∏ó‡∏£‡πÇ‡∏¢‡∏Ñ"]',
            "local_specialties": '["‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏Ñ‡∏±‡πà‡∏ß", "‡∏°‡∏∞‡∏°‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ", "‡∏Ç‡∏ô‡∏°‡∏ñ‡∏±‡πà‡∏ß‡πÅ‡∏õ‡∏ö"]',
            "tax_reduction_percentage": 30.0,
            "max_reduction_amount": 15000.0
        },
        {
            "name_th": "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢",
            "name_en": "Chiang Rai",
            "code": "CRI",
            "province_type": ProvinceType.SECONDARY,
            "region": "‡πÄ‡∏´‡∏ô‡∏∑‡∏≠",
            "description": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ ‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏≠‡∏Å‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå",
            "famous_attractions": '["‡∏ß‡∏±‡∏î‡∏£‡πà‡∏≠‡∏á‡∏Ç‡∏∏‡πà‡∏ô", "‡∏ö‡πâ‡∏≤‡∏ô‡∏î‡∏≥", "‡πÑ‡∏£‡πà‡∏ä‡∏≤"]',
            "local_specialties": '["‡∏ä‡∏≤‡∏≠‡∏π‡πà‡∏´‡∏•‡∏á", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡∏°‡∏±‡∏î", "‡∏•‡∏≤‡∏ö‡∏õ‡∏•‡∏≤‡∏î‡∏¥‡∏ö"]',
            "tax_reduction_percentage": 30.0,
            "max_reduction_amount": 15000.0
        },
        {
            "name_th": "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï",
            "name_en": "Phuket",
            "code": "HKT",
            "province_type": ProvinceType.PRIMARY,
            "region": "‡πÉ‡∏ï‡πâ",
            "description": "‡πÄ‡∏Å‡∏≤‡∏∞‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ó‡∏¢",
            "famous_attractions": '["‡∏´‡∏≤‡∏î‡∏õ‡πà‡∏≤‡∏ï‡∏≠‡∏á", "‡∏ß‡∏±‡∏î‡∏ä‡∏•‡∏≠‡∏á‡∏ß‡∏£‡∏£‡∏≤‡∏°", "‡∏≠‡πà‡∏≤‡∏ß‡∏û‡∏±‡∏á‡∏á‡∏≤"]',
            "local_specialties": '["‡∏´‡∏≠‡∏¢‡∏ó‡∏≠‡∏î", "‡∏Ç‡πâ‡∏≤‡∏ß‡∏¢‡∏≥", "‡∏•‡∏π‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏õ‡∏•‡∏≤"]',
            "tax_reduction_percentage": 0.0,
            "max_reduction_amount": 0.0
        }
    ]
    
    with next(get_session()) as session:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_provinces = session.exec(select(Province)).all()
        if existing_provinces:
            print("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
            return
            
        for prov_data in provinces:
            province = Province(**prov_data)
            session.add(province)
        session.commit()
    
    print(f"‚úÖ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {len(provinces)} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def seed_tax_benefits():
    """‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ"""
    print("üí∞ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ...")
    
    tax_benefits = [
        {
            "benefit_name": "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
            "benefit_type": TaxBenefitType.SECONDARY_PROVINCE,
            "description": "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ 30% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏£‡∏≠‡∏á",
            "reduction_percentage": 30.0,
            "max_reduction_amount": 15000.0,
            "min_spending_amount": 1000.0,
            "eligible_activities": '["‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß", "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°"]',
            "required_documents": '["‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", "‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"]',
            "start_date": datetime(2024, 1, 1),
            "end_date": datetime(2025, 12, 31),
            "is_active": True
        },
        {
            "benefit_name": "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
            "benefit_type": TaxBenefitType.PROVINCE_SPECIFIC,
            "description": "‡∏•‡∏î‡∏´‡∏¢‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ",
            "province_id": 3,  # ‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ
            "reduction_percentage": 30.0,
            "max_reduction_amount": 15000.0,
            "min_spending_amount": 500.0,
            "eligible_activities": '["‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß"]',
            "required_documents": '["‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", "‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á"]',
            "start_date": datetime(2024, 6, 1),
            "end_date": datetime(2025, 8, 31),
            "is_active": True
        }
    ]
    
    with next(get_session()) as session:
        for benefit_data in tax_benefits:
            benefit = TaxBenefit(**benefit_data)
            session.add(benefit)
        session.commit()
    
    print(f"‚úÖ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå {len(tax_benefits)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def seed_users():
    """‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    print("üë• ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...")
    
    users = [
        {
            "username": "admin",
            "hashed_password": get_password_hash("secret"),
            "email": "admin@thaitour.com",
            "full_name": "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
            "role": UserRole.ADMIN,
            "is_active": True,
            "is_verified": True
        },
        {
            "username": "user",
            "hashed_password": get_password_hash("secret"),
            "email": "user@thaitour.com", 
            "full_name": "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
            "role": UserRole.USER,
            "is_active": True,
            "is_verified": True
        }
    ]
    
    with next(get_session()) as session:
        for user_data in users:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ username ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            from sqlmodel import select
            existing_user = session.exec(
                select(User).where(User.username == user_data["username"])
            ).first()
            
            if not existing_user:
                user = User(**user_data)
                session.add(user)
            else:
                print(f"  - ‡∏Ç‡πâ‡∏≤‡∏°: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_data['username']} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                
        session.commit()
    
    print(f"‚úÖ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {len(users)} ‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ThaiTour...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    init_database()
    
    # ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    seed_provinces()
    seed_tax_benefits()
    seed_users()
    
    print("üéâ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    print("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: thaitour.db")

if __name__ == "__main__":
    main()
